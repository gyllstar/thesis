%\documentclass{sig-alternate-sigmod08}
\documentclass[10pt,conference]{IEEEtran} 
\usepackage{graphicx}
\usepackage{epsfig}
\usepackage{amssymb}
\usepackage{amsfonts}
\usepackage{verbatim}
\usepackage{moreverb}
\usepackage{cancel}
\usepackage{fancyhdr}
\usepackage{algorithmic}
\usepackage{algorithm}
\usepackage{timestamp}
\usepackage{epstopdf}
%\usepackage{tikz}
%\usepackage{tikz,fullpage,tikz_custom}
\usepackage{subfigure}
%\usepackage{multicol}
%\usepackage{coordsys}
%\usetikzlibrary{arrows,%
%	          	petri,%
%					topaths}%
%\usepackage{tkz-berge}
%\usepackage[position=top]{subfig}
%\usepackage{epstopdf}
%\usepackage{amsmath}


%%%%%%%%%%  NEEDS to be commente out to have the nice headers %%%%%
%\pagestyle{fancy}
\DeclareGraphicsRule{.tic}{png}{.png}{`convert #1 `dirname #1`/`basename #1 .tif`.png}

%\textwidth = 6.5 in
%\textheight = 9 in
%\oddsidemargin = 0.0 in
%\evensidemargin = 0.0 in
%\topmargin = 0.0 in
%\headheight = 0.0 in
%\headsep = 0.0 in
%\parskip = 0.2in
%\parindent = 0.0in
%\abovedisplayskip
%\belowdisplayskip
 
%Rnd{\classname}{FOO 699}
\newcommand{\doc}{Technical Report}
\newcommand{\doctitle}{Recovery from False State in Distributed Routing Algorithms}
\newcommand{\myname}{Daniel Gyllstrom}
\newcommand{\qed}{\hfill $\Box$ \hfill \\}
\newcommand{\mod}{{\rm mod\ }}

\newcommand{\minv}{$\overrightarrow{min}$ }
\newcommand{\minvi}{$\overrightarrow{min}_i$ }
\newcommand{\minvis}{$\overrightarrow{min}_i$}
\newcommand{\minvj}{$\overrightarrow{min}_j$ }
\newcommand{\minvjs}{$\overrightarrow{min}_j$}
\newcommand{\minvv}{$\overrightarrow{min}_v$ }
\newcommand{\minvvs}{$\overrightarrow{min}_v$}
\newcommand{\dmatrix}{$dmatrix$ }
\newcommand{\dmatrixi}{$dmatrix_i$ }
\newcommand{\dmatrixis}{$dmatrix_i$} 
\newcommand{\dmatrixj}{$dmatrix_j$ }
\newcommand{\dmatrixjs}{$dmatrix_j$} 
\newcommand{\dmatrixv}{$dmatrix_v$ }
\newcommand{\dmatrixvs}{$dmatrix_v$} 
%\newcommand{\dmatrixvs}{{\tt dmatrix$_v$}}
\newcommand{\dv}{{DV$^+$ }}
%\newcommand{\bad}{{$\hat{v}$ }}
\newcommand{\bad}{{$\overline{v}$ }}
\newcommand{\bads}{{$\overline{v}$}}
\newcommand{\alg}{{DV$^+$ }}
\newcommand{\block}{{\tt todo-rename }}
\newcommand{\second}{{{\tt 2}$^{{\tt nd}}$ {\tt best} }}
\newcommand{\seconds}{{{\tt 2}$^{{\tt nd}}$ {\tt best}}}
\newcommand{\infinity}{{count-to-$\infty$ }}
\newcommand{\purge}{{{\tt purge} }}
\newcommand{\purges}{{{\tt purge}}}
\newcommand{\resetall}{{{\tt reset-all} }}
\newcommand{\resetalls}{{{\tt reset-all}}}
\newcommand{\resetk}{{{\tt reset-k} }}
\newcommand{\resetks}{{{\tt reset-k}}}
%\newcommand{\badvector}{{$v_{bad-lie}$ }}
%\newcommand{\oldvector}{{$v_{bad-old}$ }}
\newcommand{\badvector}{$\overrightarrow{bad}$ }
\newcommand{\badvectors}{$\overrightarrow{bad}$}
\newcommand{\oldvector}{$\overrightarrow{old}$ }
\newcommand{\oldvectors}{$\overrightarrow{old}$}
\newcommand{\finalvector}{{$v_{final}$ }}
\newcommand{\illigit}{{illegitimate path} }
\newcommand{\illigits}{{illegitimate paths} }
\newcommand{\lcd}{$\Delta_{lc}$ }
\newcommand{\lcds}{$\Delta_{lc}$s }
\newcommand{\cpr}{{\tt cpr} }
\newcommand{\cprs}{{\tt cpr}}
\newcommand{\er}{Erd\"{o}s-R\'enyi }
\newcommand{\ers}{Erd\"{o}s-R\'enyi} 
\newcommand{\reword}{{\it  Comment: reword}. }
\newcommand{\more}{{\it  Comment: more details needed here}. }
\newcommand{\HRule}{\rule{\linewidth}{0.5mm}}

%newcommand{\block}{{\textsc{block-wait} }}


%%%%%%%%%%%%% This adds the header to each page - currently a bit broken so commented out
%\lhead{\myname{}}
%\chead{\myname{}}
%\rhead{\doc{}}
%\lfoot{}
%

\makeatletter
\newcommand{\un}[1]{%
   % \ifmmode \@@underline{#1} \else %
             $\@@underline{\hbox{#1}}$\fi}
\makeatother
\raggedbottom

\begin{document}




\title{\doctitle}


%\author{
%\IEEEauthorblockN{Daniel P. Gyllstrom} 
%\IEEEauthorblockA{Department of Computer Science \\ 
%University of Massachusetts Amherst \\ 
%dpg@cs.umass.edu} 
%\and 
%\IEEEauthorblockN{Sudarshan Vasudevan} 
%\IEEEauthorblockA{Department of Computer Science \\ 
%University of Massachusetts Amherst \\ 
%svasu@cs.umass.edu} 
%\and
%\IEEEauthorblockN{James Kurose} 
%\IEEEauthorblockA{Department of Computer Science \\ 
%University of Massachusetts Amherst \\ 
%kurose@cs.umass.edu} }

\maketitle

\input{abstract}

\section{Introduction}
\label{sec:intro}

%Distributed systems are vulnerable to malicious and misconfigured nodes which inject false system state. 

Malicious and misconfigured nodes can degrade the performance of a distributed system by injecting incorrect state information. Such false state can then be further propagated 
through the system either directly in its original form or indirectly, e.g., as a result of diffusing computations initially using this false state.  In this paper, we consider 
the problem of removing such false state from a distributed system.

In order to make the false-state-removal problem concrete, we investigate distance vector routing as an instance of this problem. Distance vector forms the basis for many routing 
algorithms widely used in the Internet (e.g., BGP, a path-vector algorithm) and in multi-hop wireless networks (e.g., AODV, diffusion routing). However, distance vector is vulnerable 
to compromised nodes that can potentially flood a network with false routing information, resulting in erroneous shortest paths, packet loss, and congestion. Such scenarios have occurred
in practice. For example, in 1997 a significant portion of Internet traffic was routed through a single misconfigured router, rendering a large part of the Internet inoperable for several
hours \cite{Neumann97}. More recently \cite{Google}, a routing error forced Google to redirect its traffic through Asia causing congestion that left many Google services unreachable. 
Distance vector currently has no mechanism to recover from such scenarios. Instead, human operators are left to manually reconfigure routers. It is in this context that we propose and
evaluate automated solutions for recovery.

In this paper, we design, develop, and evaluate three different approaches for correctly recovering from the injection of false routing state (e.g., a compromised node incorrectly
claiming a distance of $0$ to all destinations). The false state, in turn, may propagate to other routers through the normal execution of distance vector routing. Consequently, we must
address a network-wide problem. Recovery is correct if the routing tables in all nodes have converged to a global state in which all nodes have removed each compromised node as a destination,
and for each node, none of that nodeâ€™s shortest paths to any destination route through a compromised node.

Specifically, we develop three novel distributed recovery algorithms: \seconds, \purges, and \cprs. \second performs localized state invalidation, followed by network-wide recovery. 
Nodes directly adjacent to a compromised node locally select alternate paths that avoid the compromised node; the traditional distributed distance vector algorithm is then executed to 
remove remaining false state using these new distance vectors. The \purge algorithm performs global false state invalidation by using diffusing computations to invalidate distance vector 
entries (network-wide) that routed through a compromised node. As in \seconds, traditional distance vector routing is then used to recompute distance vectors. \cpr uses system-wide snapshots 
and a rollback mechanism to implement recovery. Although our solutions are tailored to distance vector routing, we believe they represent approaches that are applicable to other instances
of this problem.
 

We prove the correctness of each algorithm and evaluate its efficiency in terms of message overhead and convergence time via simulation. Our simulations show that when considering topologies
in which link costs remain fixed, \cpr outperforms both \purge and \second (at the cost of checkpoint memory). This is because \cpr can efficiently remove all false state by simply rolling back
to a checkpoint immediately preceding the injection of false routing state. In scenarios where link costs can change, \purge outperforms \cpr and \seconds. \cpr performs poorly because, following 
rollback, it must process the valid link cost changes that occurred since the false routing state was injected;  \second and \purges, however, can make use of computations subsequent to the 
injection of false routing state that did not depend on the false routing state. We will see, however, that \second performance suffers because of the so-called \infinity problem.
 

We are unaware of any existing solutions to this problem in the networking literature. However, recovery from false routing state is closely related to recovering from malicious but 
committed transactions \cite{Liu00} \cite{Liu98} in distributed databases. Our problem is also similar to that of rollback in optimistic parallel simulation \cite{Jeff}. We stress that we are
not focusing on discovering misconfigured nodes, but instead on recovering after a compromised node has been detected.

This paper has six sections. In Section \ref{sec:problem} we define the problem and state our assumptions.
We present our three recovery algorithms in Section \ref{sec:algs}.  Then, in Section \ref{sec:trend}, we present a qualitative evaluation 
of our recovery algorithms. Section \ref{sec:eval} describes our simulation study. We detail related work in Section \ref{sec:related} and finally we conclude and 
comment on directions for future work in Section \ref{sec:future}.





\begin{comment}




Malicious and misconfigured nodes, alike, can degrade the performance of a distributed system by injecting false system state.  In the worst case, false system state
can render a distributed system unusable.  In this paper, we investigate distance vector routing as an instance of this problem. 
%We propose distributed algorithms that provide efficient recovery in scenarios where false state is injected into a network of routers. 
%Although our solutions are tailored to distance vector routing, we believe they are applicable to other instances of this problem.

%{\bf no topic sentence here}
Distance vector forms the basis for many routing algorithms widely used in the Internet and in multi-hop wireless networks. However, distance vector is vulnerable 
to compromised nodes that can potentially flood a network with false routing information. This can result in erroneous shortest paths, causing packet loss, 
congestion, and a potentially unusable network.  Such scenarios have occurred in the Internet.  For example, in 1997 a significant 
portion of Internet traffic was routed through a single misconfigured router. As a result, a large part of the Internet became inoperable for several hours 
\cite{Neumann97}. More recently, in May 2009 a routing error forced Google to redirect a large portion traffic through Asia \cite{Google}. This caused
a traffic jam, leaving many of Google's services unreachable. 
Distance vector currently has no mechanism to recover from such scenarios.  Instead, human operators are left to manually reconfigure routers. 
It is in this context that we propose and evaluate automated solutions for recovery. 


%In this paper we address the following research question, ``How can distance vector be best enhanced to efficiently recover from false routing state?'' 
We consider the case where the false routing state originates from one or more compromised nodes. Such scenarios can arise if a node's security is compromised or if a router
is misconfigured. When false state reflects small distance values, it naturally propagates throughout the network via distance vector. In this way, we address a network-wide
problem. We stress that we are \emph{not} focusing on the discovery of misconfigured nodes, rather we focus on recovering after a compromised node(s) has been
detected.

To the best of our knowledge, there are no existing solutions to this problem. However, recovery from false routing state is closely related to a problem  
from the database literature that considers how to recover from malicious but committed transactions \cite{Liu00} \cite{Liu98}. 
%We use ideas similiar to those proposed in Our recovery algorithms use ideas similiar to those proposed in these papers.
Our problem is also similar to one in discrete parallel simulation \cite{Jeff}.


%{\bf Contribution}. In this paper we design, develop, and evaluate a suite of extensions to distance vector routing to remove false routing state with a network of routers resulting
In this paper, we design, develop, and evaluate three different approaches for correctly recovering from the injection of false routing state 
(e.g., a compromised node incorrectly claims a distance of $0$ to all destinations).  The false state, in turn, may propagate to other routers through the normal
execution of distance vector routing. Recovery is correct if it satisfies two conditions. First, all false routing state originating from compromised node(s) is removed from the
entire network of routers.
Second, the recovery algorithm converges with a global state that meets two requirements: all nodes remove each compromised node as a destination in their routing table and  
for each node, $i$, none of $i$'s shortest paths route through a compromised node.

Specifically, we develop three novel distributed recovery algorithms: \seconds, \purges, and \cprs. With \seconds, nodes select alternate paths that do not use a compromised node; this is done based 
only on local information. \purge consists of two phases.  The first phase uses diffusing computations to remove all false routing state.  The second phase, recomputes distances which
were invalidated in the first phase. \cpr uses system-wide snapshots and a rollback mechanism to implement recovery.
Although our solutions are tailored to distance vector routing, we believe they are applicable to other instances of this problem.

We prove the correctness of each algorithm and through a detailed simulation study we evaluate their efficiency in terms of message complexity and convergence time. Our simulations
show that when considering topologies in which link costs remain fixed, \cpr outperforms both \purge and \seconds. This is because \cpr can efficiently remove all false state by rolling back
to a checkpoint which is free of false routing state.  In the case of topologies where link costs change, \purge outperforms \cpr and \seconds. \cpr performs poorly because  
after rolling back, \cpr needs to update stale state resulting from link cost changes.  \second performance suffers because of the so-called \infinity problem. 
\purges, on the other hand, does not face these issues (by design) and so performs well.

%Our results show \cprs, an algorithm that uses system-wide checkpoints and a rollback mechanism to implement recovery, yields superior performance over \purge
%and \seconds, which both use iterative distributed computations to incrementally remove false routing state and find new shortest paths.
%Our results show \cprs, an algorithm that leverages system-wide snapshots/checkpoints to rollback to a global state reflecting a system state the before the compromised node(s) 
%corruption, yields superior performance over \purge
%and \seconds, which both use iterative distributed computation to incrementally remove false routing state and find new shortest paths.

%Recovery is defined as each node converging on new least cost distances that do not use the compromised node. 

%Through a detailed simulation study, we evaluate the effectiveness of our recovery algorithms in terms of message complexity.
%{\bf todo}: {\it may want to mention the algorithms, may not need to name them but at least mention their essence}`


%However, there is a closely related problem
%from the database literature that considers how to recover from malicious but committed transactions \cite{Liu00} \cite{Liu98}. Surprisingly, techniques from
%this very different domain apply well to our problem. We point out these connections when we present our recovery algorithms.  {\bf todo:} {\it mention work
%on compromised node detection}.

%The rest of the paper is organized as follows. 
This paper has 6 sections. In Section \ref{sec:problem} we define the problem and state our assumptions.
We present our three recovery algorithms in Section \ref{sec:algs}. Section \ref{sec:related} details related work. Then, in Section \ref{sec:trend}, we present a qualitative evaluation 
of our recovery algorithms.
 Section \ref{sec:eval} describes our simulation study, and finally we conclude and comment on directions for future work in Section \ref{sec:future}.

\end{comment}

%Section \ref{sec:back} reviews the distance vector algorithm. %we prove the correctness of these algorithms in Section \ref{sec:correct}, 
%Section \ref{sec:prelim} presents a useful analogy we use to describe our algorithms and notation used in the remainder of the documet.
%Section \ref{sec:discuss} discusses our recovery algorithms in greater details ({\bf todo fix this sentence}). 


%In particular, we propose and investigate the following algorithms in this paper:
%\begin{itemize}
%	\item \seconds. \second represents the smallest possible change to distance vector. In this approach, neighbors of a compromised node remove the compromised node 
%	from the graph and then use distance vector to compute new shortest paths.
	
%	\item \purges.  \purge is a two phase algorithm.  In the first phase, all paths that had previously contained the compromised node are removed 
%	from the network. The second phase uses distance vector to then compute alternate paths.  
	
%	\item \cprs: \cpr archives routing state so nodes can rollback to a state snapshot before the compromised node ``went bad''. Nodes then
%	remove the compromised node from their distance tables, and update any stale links costs. 
%
%\end{itemize}

\input{problem-stmt}

%\input{background}


%\input{prelim}

\input{algorithms}




%\section{Correctness Proofs}
%\label{sec:correct}
%{\it Although I do not have time to complete formal proofs of correctness I at least want to give the inuition as to why these algorithms are correct
%and converge}

%\input{discuss}

\input{trends}

\input{experiments}

\input{related}

\input{future}

\section{Acknowledgments}
The authors greatly appreciate discussions with Dr. Brian DeCleene of BAE Systems, who initially suggested this problem area.


\bibliographystyle{plain}
\bibliography{infocom}

\input{appendix}

%\input{todo}

\end{document}
