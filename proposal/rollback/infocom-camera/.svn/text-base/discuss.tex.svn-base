%%%%%%%%%%%%%%%%%%% SECTION DISCUSSIOn %%%%%%%%%%%%%%%%%%%%%%%%
\section{Discussion}
\label{sec:discuss}

{\bf todo have intro sentence or two}

\subsection{How far does \badvector travel?}
\label{subsec:k}

\badvector is shared as a standard distance vector message and spreads via the execution of the distance vector algorithm. Therefore, if we 
ignore how long it takes before \bad is discovered, the distance \badvector travels is determined by distance vector. 
We refer to this behavior \badvector's \emph{natural propagation}.

A more interesting case arises when the oracle discovers \bad before \badvector has completed its natural propagation.
 These cases can arise when distance vectors are shared at fixed epochs, as they are in almost all distance vector implementations.
For example,
in RIP \cite{RIPv1} distance vectors are shared every $30$ seconds. So if it takes $60$ seconds for the oracle to discover and
notify all nodes, \badvector could travel at most $2$ hops from \bad. 

Although none of our algorithms presented in Section \ref{sec:algs}
make use of this property, the distance \badvector travels is an important variable affecting the performance of each these algorithms, with
one exception: \cpr's performance is independent of the number of hops \badvector travels because every node rolls back to a snapshot taken 
before $t'$.  Since the performance of \second and \purge is affected by this variable, we explore its effects in our simulation 
study presented in Section \ref{sec:eval}.


%%%%%%%%%%%%%%%% TRENDS IN RECOVERY SECTION %%%%%%%%%%
\subsection{Recovery Trends}
\label{subsec:trend}

In this section we qualitatively characterize how \minv values change during recovery. Understanding these trends is useful 
in understanding the results from simulation study we present in Section \ref{sec:eval}. 
We prove properties about \minv and least values in order provide a precise characterization of recovery trends.  
In particular, our proofs establish that:
%We do not characterize system behavior for \second
%and \cpr in this section becuase their behavior is relatively simple.  Instead, we wait until the evaluation section (Section \ref{sec:eval}) 
%to present their recovery trends. 

\begin{itemize}
	\item The least cost between two nodes at the start of recovery is less than or equal to its cost when recovery has completed. That is,
	once the effects of the bad node have been removed from the network, path costs cannot decrease.(Claim $1$)
	
	\item Before recovery begins, if the least cost between two nodes is less than its cost when recovery is complete, the path must 
  be using \badvector or \oldvector either directly or transitively. (Corollary $1$)

	\item During \second recovery only, the least cost between two nodes is less than its cost when recovery is complete, the path must 
  be using \badvector or \oldvector either directly or transitively. (Corollary $2$)

	%\item During recovery, if the least cost between two nodes exceeds the cost when recovery is complete then the node has yet to learn about the path used 
  	%when recovery is complete. (Claim $2$)

\end{itemize}
The first two statements apply to any recovery algorithm because it makes no claims about \minv values during recovery. Also our proofs assume that
link costs remain fixed during recovery (i.e, the interval $[t',t]$).
%These results are only relevant to \second and \purge recovery. \minv values during \cpr recovery do not follow these rules because it is possible
%that when rolling back link costs have different values such that the conditions for our claims below do not hold.

{\bf Notation}. We use the definition of $G$ and $G'$ described in Section \ref{sec:algs}. $G=(V,E)$, with weight function $w: E \rightarrow \mathbb{N}$ and
$G$ is undirected. $G'=(V',E')$, where $V' = V -$ \bad, $E'=E - \{(\bar{v},v_i)$ $|$ $v_i =adj(\bar{v}) \}$, edge weight function $w: E \rightarrow \mathbb{N}$,
	and $G'$ is undirected. Let $n,d \in V'$. Let $p_s(n,d)$ be the least cost path from node $n$ to $d$ at the start of recovery and $\delta_s(n,d)$ its 
cost; $p_i(n,d)$ is the least cost path from $n$ to $d$ used during the recovery 
and $\delta_i(n,d)$ the cost of this path (the path and cost used can change over time during recovery); and $p_f(n,d)$ the least cost path from $n$ to $d$ 
when recovery is finished and has cost $\delta_f(n,d)$.  %Using this notation we derive the following relationships. 
%Note by path we refer both to the nodes used to get from $n$ to $d$ and the cost of this path.  


{\bf Claim 1} $\forall n,d\in V'$, $ \delta_s(n,d) \leq \delta_f(n,d)$.

{\it Proof:} Assume $\exists n_i,d_i\in V'$ such that $\delta_s(n_i,d_i) > \delta_f(n_i,d_i)$.  The paths available at the start of recovery are a superset of 
those available when recovery is complete. This means $p_f(n_i,d_i)$ is available before recovery begins. Distance vector would use this path rather
than $p_s(n_i,d_i)$, implying that $\delta_s(n_i,d_i)=\delta_f(n_i,d_i)$, a contradiction. \qed

{\bf Corollary 1} {\it $\forall n,d\in V'$, if $\delta_s(n,d) < \delta_f(n,d)$, then $p_s(n,d)$ is using \badvector or \oldvector either directly or transitively.}

{\it Proof:} Assume $\exists n_i,d_i\in V$ such that a path $p_{s}(n_i,d_i)$ with cost $\delta_{s}(n_i,d_i)$ is used before recovery begins such that 
$\delta_{s}(n_i,d_i) < \delta_f(n_i,d_i)$ and  $p_{s}(n_i,d_i)$ does not use \badvector or \oldvector.  Because the only paths available before recovery begins that do not 
exist when recovery completes are ones using \badvector or \oldvector, $p_{s}(n_i,d_i)$  must be available after recovery completes since we have assumed that
$p_{s}(n_i,d_i)$ does not use \badvector or \oldvector. Distance vector would use  $p_{s}(n_i,d_i)$ instead of $p_f(n_i,d_i)$ because 
$\delta_{s}(n_i,d_i) < \delta_f(n_i,d_i)$.  However this would 
imply that $\delta_{s}(n_i,d_i)= \delta_f(n_i,d_i)$, a contradiction. \qed

{\bf Corollary 2} {\it $\forall n,d\in V'$, if $\delta_i(n,d) < \delta_f(n,d)$ 
  then $p_i(n,d)$  must be using \badvector or \oldvector either directly or transitively}.

{\it Proof:} We can use the same proof for Corollary 1 if we substitute $\delta_i(n,d)$ for $\delta_s(n,d)$ and $p_i(n,d)$ for $p_s(n,d)$. \qed

Corollary 2 does not apply to \purge recovery because the  $\delta_i(n,d) < \delta_f(n,d)$ may not necessarily be satisfied. This is the case
because \infinity messages are not possible with \purge.

%Corollary 2 does not apply to \purge and \cpr recovery because the  $\delta_i(n,d) < \delta_f(n,d)$ may not necessarily be satisfied. Count-to-infinity
%messages are not possible with \purge so this condition is never met. With \cpr, it is possible that the state of a \minv used after rolling
%back does not satsify this condition because the \minv may reflect old link cost values that are less than their current values.
%These results establish that distance values before and during recovery are less than or equal to their final value. 
These results are useful in understanding recovery using \second and \cpr in cases where link costs remain fixed. With either algorithm,
our proofs imply that the general trend is for all \minv to increase from their value at the start of recovery up 
to their value when recovery has completed. Specifically, as a manifestation of the \infinity problem, paths using \badvector or \oldvector 
(with \cpr only \oldvector can be used as discussed in Section \ref{subsec:cpr}) are shared,
causing least cost paths to count up to their final value.  
There is one exception to this trend.  A node may learn of a new least 
cost path that uses \badvector or \oldvector with a cost less than any of its current least cost path, causing its least cost path to decrease. 

By Claim 1, \purge recovery also starts with \minv values less than or equal to their final value. However, for \purge \minv values actually 
count down from the $\infty$ costs set after the purge phase. 

%\cpr recovery trends are more difficult to characterize because link cost values can change between $t'$ and $t$.

We leverage these characterizations to explain our simulation results in the following section.







